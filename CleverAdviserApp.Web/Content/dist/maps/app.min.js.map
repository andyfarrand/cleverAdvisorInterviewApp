{"version":3,"sources":["app.js","routes.js","templates.js","Components/app.component.js","Pipes/ConvertToDate.js","Pipes/StartFrom.js","Services/investor-api.service.js","UtilityFunctions/utility.js","Components/Accounts/accounts-list.component.js","Components/Accounts/accounts.component.js","Components/Home/home.component.js","Components/Investors/investor-list.component.js","Components/Investors/investors.component.js"],"names":["App","app","angular","module","config","$locationProvider","html5Mode","run","$rootScope","$on","event","toState","toParams","fromState","fromParams","$","removeClass","addClass","$stateProvider","states","name","url","component","resolve","investors","investorService","get","investor","$stateParams","getById","id","forEach","state","$templateCache","put","AppComponent","this","bindings","controller","AppController","templateUrl","ConvertToDate","factory","f","utility","dateStr","convertJsonDateToJSDate","$inject","filter","input","start","slice","InvestorApiService","$http","$q","prototype","console","log","defer","cache","then","result","data","catch","error","reject","promise","i","investorId","length","service","Utility","moment","jsonDate","toDate","AccountsListComponent","accounts","AccountsListController","$timeout","_this","sorts","filters","dateFilter","startDate","endDate","investmentAmountSelectedFilter","accountTypeFilter","accountTypeList","investmentAmounts","currentPage","perPage","$onInit","setupFilters","setupSorts","applyFilters","account","Object","keys","reduce","acc","next","idFilter","accountId","date","dateCreated","maxInvestmentAmount","amountHeld","levels","Math","ceil","push","min","max","display","map","type","value","index","self","indexOf","sort","label","predicate","sortReverse","selectedSort","s","clearCalendar","element","val","clearAccountType","clearInvested","AccountsComponent","AccountsController","HomeComponent","HomeController","InvestorListComponent","InvestorListController","window","numOfAccountsFilter","numOfAccountsList","surname","totalInvested","nameFilter","toLowerCase","surnameFilter","numberOfAccounts","a","b","clearAccounts","InvestorsComponent","InvestorsController"],"mappings":"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","file":"../app/app.min.js","sourcesContent":["var App;\r\n(function (App) {\r\n    var app = angular.module(\"app\", ['angular-momentjs', 'daterangepicker', 'ui.bootstrap', 'ui.router', 'angular-loading-bar']);\r\n    app.config([\"$locationProvider\", function ($locationProvider) {\r\n            $locationProvider.html5Mode(true);\r\n        }]);\r\n    app.run([\"$rootScope\", function ($rootScope) {\r\n            $rootScope\r\n                .$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\r\n                $(\".page-loading\").removeClass(\"hidden\");\r\n            });\r\n            $rootScope\r\n                .$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\r\n                $(\".page-loading\").addClass(\"hidden\");\r\n            });\r\n        }]);\r\n})(App || (App = {}));\r\n//# sourceMappingURL=app.js.map","var App;\r\n(function (App) {\r\n    angular.module(\"app\").config([\"$stateProvider\", function ($stateProvider) {\r\n            var states = [\r\n                {\r\n                    name: \"home\",\r\n                    url: \"/\",\r\n                    component: \"home\"\r\n                },\r\n                {\r\n                    name: \"investors\",\r\n                    url: \"/investors\",\r\n                    component: \"investors\",\r\n                    resolve: {\r\n                        investors: [\"investorApiService\", function (investorService) {\r\n                                return investorService.get();\r\n                            }]\r\n                    }\r\n                },\r\n                {\r\n                    name: \"accounts\",\r\n                    url: \"/investors/{id}\",\r\n                    component: \"accounts\",\r\n                    resolve: {\r\n                        investor: [\"investorApiService\", \"$stateParams\", function (investorService, $stateParams) {\r\n                                return investorService.getById($stateParams.id);\r\n                            }]\r\n                    }\r\n                }\r\n            ];\r\n            states.forEach(function (state) {\r\n                $stateProvider.state(state);\r\n            });\r\n        }]);\r\n})(App || (App = {}));\r\n//# sourceMappingURL=routes.js.map","angular.module('app').run(['$templateCache', function($templateCache) {$templateCache.put('Components/app.template.html','<div id=\"main-banner\">\\r\\n    <div class=\"overlay\"> \\r\\n        <h1>Clever Adviser</h1>\\r\\n    </div>\\r\\n</div>\\r\\n<nav class=\"navbar navbar-default\">\\r\\n    <div class=\"container\">\\r\\n        <ul class=\"nav navbar-nav\">\\r\\n            <li ui-sref-active=\"active\">\\r\\n                <a ui-sref=\"home\">Home</a>\\r\\n            </li>\\r\\n            <li ui-sref-active=\"active\">\\r\\n                <a ui-sref=\"investors\">Investors</a>\\r\\n            </li>\\r\\n        </ul>\\r\\n    </div>\\r\\n\\r\\n</nav>\\r\\n\\r\\n\\r\\n<div class=\"container\">\\r\\n    <ui-view></ui-view>\\r\\n</div>\\r\\n<div class=\"page-loading hidden\">\\r\\n    <div class=\"sk-circle\">\\r\\n        <div class=\"sk-circle1 sk-child\"></div>\\r\\n        <div class=\"sk-circle2 sk-child\"></div>\\r\\n        <div class=\"sk-circle3 sk-child\"></div>\\r\\n        <div class=\"sk-circle4 sk-child\"></div>\\r\\n        <div class=\"sk-circle5 sk-child\"></div>\\r\\n        <div class=\"sk-circle6 sk-child\"></div>\\r\\n        <div class=\"sk-circle7 sk-child\"></div>\\r\\n        <div class=\"sk-circle8 sk-child\"></div>\\r\\n        <div class=\"sk-circle9 sk-child\"></div>\\r\\n        <div class=\"sk-circle10 sk-child\"></div>\\r\\n        <div class=\"sk-circle11 sk-child\"></div>\\r\\n        <div class=\"sk-circle12 sk-child\"></div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n');\n$templateCache.put('Components/Accounts/accounts-list.template.html','<div class=\"table-responsive account-table\">\\r\\n    <div class=\"sort-row\">\\r\\n        <div class=\"result-counts\">\\r\\n            Showing {{($ctrl.currentPage-1)*$ctrl.perPage + 1}} to {{($ctrl.currentPage-1)*$ctrl.perPage + $ctrl.perPage }} of {{filtered.length}} results\\r\\n            <span ng-if=\"filtered.length < $ctrl.accounts.length\"> ({{$ctrl.accounts.length - filtered.length}} hidden by filters)</span>\\r\\n        </div>\\r\\n        <div class=\"sort-label\">\\r\\n            Sort By:\\r\\n        </div>\\r\\n        <div class=\"sort-select\">\\r\\n            <select class=\"form-control\"\\r\\n                    ng-options=\"option.label for option in $ctrl.sorts track by option.label\"\\r\\n                    ng-model=\"$ctrl.selectedSort\"\\r\\n                    ng-change=\"$ctrl.currentPage = 1\"></select>\\r\\n        </div>\\r\\n    </div>\\r\\n    <table class=\"table table-striped table-hover\">\\r\\n        <thead>\\r\\n            <tr>\\r\\n                <th>\\r\\n                   Account Id\\r\\n                </th>\\r\\n                <th>\\r\\n                    Type\\r\\n                </th>\\r\\n                <th>\\r\\n                    Date Created\\r\\n                </th>\\r\\n\\r\\n                <th>\\r\\n                    Amount Held\\r\\n                </th>\\r\\n            </tr>\\r\\n            <tr class=\"filter-row\">\\r\\n                <td>\\r\\n                    <div class=\"input-group\">\\r\\n                        <input type=\"text\" class=\"form-control\" ng-model=\"$ctrl.idFilter\" />\\r\\n                        <span class=\"input-group-btn\">\\r\\n                            <button class=\"btn btn-danger\" ng-click=\"$ctrl.idFilter = null\">&times;</button>\\r\\n                        </span>\\r\\n                    </div>\\r\\n                </td>\\r\\n                <td>\\r\\n                    <div class=\"input-group\">\\r\\n                        <select class=\"form-control\" ng-options=\"option for option in $ctrl.accountTypeList\" ng-model=\"$ctrl.accountTypeFilter\">\\r\\n                            <option value=\"\" label=\"\" selected></option>\\r\\n                        </select>\\r\\n                        <span class=\"input-group-btn\">\\r\\n                            <button class=\"btn btn-danger\" ng-click=\"$ctrl.clearAccountType()\">&times;</button>\\r\\n                        </span>\\r\\n                    </div>\\r\\n                </td>\\r\\n\\r\\n                <td>\\r\\n                    <div class=\"input-group\">\\r\\n                        <input type=\"text\" date-range-picker class=\"form-control date-picker\" ng-model=\"$ctrl.dateFilter\" />\\r\\n                        <span class=\"input-group-btn\">\\r\\n                            <button class=\"btn btn-danger\" ng-click=\"$ctrl.clearCalendar()\">&times;</button>\\r\\n                        </span>\\r\\n                    </div>\\r\\n                </td>\\r\\n\\r\\n                <td>\\r\\n                    <div class=\"input-group\">\\r\\n                        <select id=\"investmentSelect\" name=\"investmentSelect\" \\r\\n                                ng-options=\"option.display for option in $ctrl.investmentAmounts track by option.min\"\\r\\n                                ng-model=\"$ctrl.investmentAmountSelectedFilter\" class=\"form-control\">\\r\\n                            <option value=\"\" label=\"\" selected></option>\\r\\n                        </select>\\r\\n                        <span class=\"input-group-btn\">\\r\\n                            <button class=\"btn btn-danger\" ng-click=\"$ctrl.clearInvested()\">&times;</button>\\r\\n                        </span>\\r\\n                    </div>\\r\\n                </td>\\r\\n            </tr>\\r\\n        </thead>\\r\\n        <tbody>\\r\\n            <tr ng-repeat=\"account in paged = (filtered = ($ctrl.accounts | orderBy: $ctrl.selectedSort.predicate:$ctrl.selectedSort.sortReverse | filter: $ctrl.applyFilters ) | startFrom: (($ctrl.currentPage-1)*$ctrl.perPage) | limitTo: $ctrl.perPage ) \">\\r\\n                <td>\\r\\n                    {{::account.accountId}}\\r\\n                </td>\\r\\n                <td>\\r\\n                    {{::account.type }}\\r\\n                </td>\\r\\n                <td>\\r\\n                    {{::account.dateCreated | convertToDate | date: \"dd MMM yyyy\"}}\\r\\n                </td>\\r\\n                <td>\\r\\n                    {{::account.amountHeld | currency: \"\\xA3\":2}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </tbody>\\r\\n    </table>\\r\\n    <ul uib-pagination total-items=\"filtered.length\" ng-model=\"$ctrl.currentPage\"></ul>\\r\\n</div>\\r\\n\\r\\n');\n$templateCache.put('Components/Accounts/accounts.template.html','<div>\\r\\n    <h2>Accounts</h2>\\r\\n    <div> Investor: {{$ctrl.investor.name}} {{$ctrl.investor.surname}}</div>\\r\\n    <div> Total Amount Invested: {{$ctrl.investor.totalInvested | currency:\"\\xA3\":2}}</div>\\r\\n    <hr />\\r\\n    <account-list accounts=\"$ctrl.investor.accounts\"></account-list>\\r\\n</div>');\n$templateCache.put('Components/Home/home.template.html','<div>\\r\\n    <h2>Home Page</h2>\\r\\n    <div>Welcome to the Clever Adviser Investers Application. To view investors click the ink in the navigation bar</div>\\r\\n</div>');\n$templateCache.put('Components/Investors/investor-list.template.html','<div class=\"table-responsive investor-table\">\\r\\n   <div class=\"sort-row\">\\r\\n        <div class=\"result-counts\">\\r\\n            Showing {{($ctrl.currentPage-1)*$ctrl.perPage + 1}} to {{($ctrl.currentPage-1)*$ctrl.perPage + $ctrl.perPage }} of {{filtered.length}} results\\r\\n            <span ng-if=\"filtered.length < $ctrl.investors.length\"> ({{$ctrl.investors.length - filtered.length}} hidden by filters)</span>\\r\\n        </div>\\r\\n        <div class=\"sort-label\">\\r\\n            Sort By:\\r\\n        </div>\\r\\n        <div class=\"sort-select\">\\r\\n            <select class=\"form-control\"\\r\\n                    ng-options=\"option.label for option in $ctrl.sorts track by option.label\"\\r\\n                    ng-model=\"$ctrl.selectedSort\"\\r\\n                    ng-change=\"$ctrl.currentPage = 1\"></select>\\r\\n        </div>\\r\\n    </div>\\r\\n    <table class=\"table table-striped table-hover\">\\r\\n        <thead>\\r\\n            <tr>\\r\\n                <th>\\r\\n                    Investor Id\\r\\n                </th>\\r\\n                <th>\\r\\n                    Name\\r\\n                </th>\\r\\n                <th>\\r\\n                    Surname\\r\\n                </th>\\r\\n                <th>\\r\\n                    Date Created\\r\\n                </th>\\r\\n                <th>\\r\\n                   Accounts\\r\\n                </th>\\r\\n                <th>\\r\\n                    Total Invested\\r\\n                </th>\\r\\n            </tr>\\r\\n            <tr>\\r\\n                <td>\\r\\n                    <div class=\"input-group\">\\r\\n                        <input type=\"text\" class=\"form-control\" ng-model=\"$ctrl.idFilter\" style=\"max-width:50px\"/>\\r\\n                        <span class=\"input-group-btn\">\\r\\n                            <button class=\"btn btn-danger\" ng-click=\"$ctrl.idFilter = null\">&times;</button>\\r\\n                        </span>\\r\\n                    </div>\\r\\n                </td>\\r\\n                <td>\\r\\n                    <div class=\"input-group\">\\r\\n                        <input type=\"text\" class=\"form-control\" ng-model=\"$ctrl.nameFilter\" />\\r\\n                        <span class=\"input-group-btn\">\\r\\n                            <button class=\"btn btn-danger\" ng-click=\"$ctrl.nameFilter= null\">&times;</button>\\r\\n                        </span>\\r\\n                    </div>\\r\\n                </td>\\r\\n                <td>\\r\\n                    <div class=\"input-group\">\\r\\n                        <input type=\"text\" class=\"form-control\" ng-model=\"$ctrl.surnameFilter\" />\\r\\n                        <span class=\"input-group-btn\">\\r\\n                            <button class=\"btn btn-danger\" ng-click=\"$ctrl.surnameFilter = null\">&times;</button>\\r\\n                        </span>\\r\\n                    </div>\\r\\n                </td>\\r\\n                <td>\\r\\n                    <div class=\"input-group\">\\r\\n                        <input type=\"text\" date-range-picker class=\"form-control date-picker\" ng-model=\"$ctrl.dateFilter\" />\\r\\n                        <span class=\"input-group-btn\">\\r\\n                            <button class=\"btn btn-danger\" ng-click=\"$ctrl.clearCalendar($event)\">&times;</button>\\r\\n                        </span>\\r\\n                    </div>\\r\\n                </td>\\r\\n                <td>\\r\\n                    <div class=\"input-group\">\\r\\n                        <select class=\"form-control\" ng-options=\"option for option in $ctrl.numOfAccountsList\" ng-model=\"$ctrl.numOfAccountsFilter\" style=\"min-width:62px\">\\r\\n                            <option value=\"\" label=\"\" selected></option>\\r\\n                        </select>\\r\\n                        <span class=\"input-group-btn\">\\r\\n                            <button class=\"btn btn-danger\" ng-click=\"$ctrl.clearAccounts()\">&times;</button>\\r\\n                        </span>\\r\\n                    </div>\\r\\n                </td>\\r\\n                <td>\\r\\n                    <div class=\"input-group\">\\r\\n                        <select id=\"investmentSelect\" name=\"investmentSelect\" style=\"min-width:120px\"\\r\\n                                 ng-options=\"option.display for option in $ctrl.investmentAmounts track by option.min\"\\r\\n                                 ng-model=\"$ctrl.investmentAmountSelectedFilter\" class=\"form-control\">\\r\\n                            <option value=\"\" label=\"\" selected></option>\\r\\n                        </select>\\r\\n                        <span class=\"input-group-btn\">\\r\\n                            <button class=\"btn btn-danger\" ng-click=\"$ctrl.clearInvested()\">&times;</button>\\r\\n                        </span>\\r\\n                    </div>\\r\\n                </td>\\r\\n            </tr>\\r\\n        </thead>\\r\\n        <tbody>\\r\\n            <tr class=\"selectable\" ui-sref=\"accounts({id: investor.investorId})\" ng-repeat=\"investor in paged = (filtered = ($ctrl.investors | orderBy: $ctrl.selectedSort.predicate:$ctrl.selectedSort.sortReverse | filter: $ctrl.applyFilters ) | startFrom: (($ctrl.currentPage-1)*$ctrl.perPage) | limitTo: $ctrl.perPage ) \">\\r\\n                <td>\\r\\n                    {{::investor.investorId}}\\r\\n                </td>\\r\\n                <td>\\r\\n                    {{::investor.name}}\\r\\n                </td>\\r\\n                <td>\\r\\n                    {{::investor.surname}}\\r\\n                </td>\\r\\n                <td>\\r\\n                    {{::investor.dateCreated | convertToDate | date: \"dd MMM yyyy\"}}\\r\\n                </td>\\r\\n                <td>\\r\\n                    {{::investor.numberOfAccounts}}\\r\\n                </td>\\r\\n                <td>\\r\\n                    {{::investor.totalInvested | currency: \"\\xA3\":2}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </tbody>\\r\\n    </table>\\r\\n    <ul uib-pagination total-items=\"filtered.length\" ng-model=\"$ctrl.currentPage\"></ul>\\r\\n</div>\\r\\n');\n$templateCache.put('Components/Investors/investors.template.html','<div>\\r\\n    <h2>Investors</h2>\\r\\n    <p>Select an investor from the list to view more details.</p>\\r\\n    <investor-list investors=\"$ctrl.investors\"></investor-list>\\r\\n</div>\\r\\n\\r\\n\\r\\n');}]);","var App;\r\n(function (App) {\r\n    var AppComponent = (function () {\r\n        function AppComponent() {\r\n            this.bindings = {};\r\n            this.controller = AppController;\r\n            this.templateUrl = \"Components/app.template.html\";\r\n        }\r\n        return AppComponent;\r\n    }());\r\n    var AppController = (function () {\r\n        function AppController() {\r\n        }\r\n        return AppController;\r\n    }());\r\n    angular.module(\"app\").component(\"app\", new AppComponent());\r\n})(App || (App = {}));\r\n//# sourceMappingURL=app.component.js.map","var App;\r\n(function (App) {\r\n    var ConvertToDate = (function () {\r\n        function ConvertToDate() {\r\n        }\r\n        ConvertToDate.factory = function () {\r\n            var f = function (utility) {\r\n                return function (dateStr) {\r\n                    return utility.convertJsonDateToJSDate(dateStr);\r\n                };\r\n            };\r\n            f.$inject = [\"utility\"];\r\n            return f;\r\n        };\r\n        return ConvertToDate;\r\n    }());\r\n    angular.module(\"app\").filter(\"convertToDate\", ConvertToDate.factory());\r\n})(App || (App = {}));\r\n//# sourceMappingURL=ConvertToDate.js.map","var App;\r\n(function (App) {\r\n    angular.module(\"app\").filter(\"startFrom\", function () {\r\n        return function (input, start) {\r\n            if (!input)\r\n                return [];\r\n            start = +start; //parse to int\r\n            return input.slice(start);\r\n        };\r\n    });\r\n})(App || (App = {}));\r\n//# sourceMappingURL=StartFrom.js.map","var App;\r\n(function (App) {\r\n    var InvestorApiService = (function () {\r\n        function InvestorApiService($http, $q) {\r\n            this.$http = $http;\r\n            this.$q = $q;\r\n        }\r\n        InvestorApiService.prototype.get = function () {\r\n            console.log(\"get called\");\r\n            var defer = this.$q.defer();\r\n            this.$http.get(\"/api/investors\", { cache: true })\r\n                .then(function (result) {\r\n                console.log(\"result:\", result);\r\n                defer.resolve(result.data);\r\n            }).catch(function (error) {\r\n                defer.reject(error);\r\n            });\r\n            return defer.promise;\r\n        };\r\n        InvestorApiService.prototype.getById = function (id) {\r\n            var defer = this.$q.defer();\r\n            this.get().then(function (result) {\r\n                var investor = result.filter(function (i) { return i.investorId === +id; });\r\n                if (investor.length > 0)\r\n                    defer.resolve(investor[0]);\r\n                else\r\n                    defer.reject();\r\n            });\r\n            return defer.promise;\r\n        };\r\n        return InvestorApiService;\r\n    }());\r\n    InvestorApiService.$inject = [\"$http\", \"$q\"];\r\n    angular.module(\"app\")\r\n        .service(\"investorApiService\", InvestorApiService);\r\n})(App || (App = {}));\r\n//# sourceMappingURL=investor-api.service.js.map","var App;\r\n(function (App) {\r\n    var Utility = (function () {\r\n        function Utility(moment) {\r\n            this.moment = moment;\r\n        }\r\n        Utility.prototype.convertJsonDateToJSDate = function (jsonDate) {\r\n            return this.moment(jsonDate).toDate();\r\n        };\r\n        return Utility;\r\n    }());\r\n    Utility.$inject = [\"MomentJS\"];\r\n    App.Utility = Utility;\r\n    angular.module(\"app\")\r\n        .service(\"utility\", Utility);\r\n})(App || (App = {}));\r\n//# sourceMappingURL=utility.js.map","var App;\r\n(function (App) {\r\n    var AccountsListComponent = (function () {\r\n        function AccountsListComponent() {\r\n            this.bindings = {\r\n                accounts: \"<\"\r\n            };\r\n            this.controller = AccountsListController;\r\n            this.templateUrl = \"Components/Accounts/accounts-list.template.html\";\r\n        }\r\n        return AccountsListComponent;\r\n    }());\r\n    var AccountsListController = (function () {\r\n        function AccountsListController(utility, $timeout, moment) {\r\n            var _this = this;\r\n            this.utility = utility;\r\n            this.$timeout = $timeout;\r\n            this.moment = moment;\r\n            this.sorts = [];\r\n            this.filters = [];\r\n            this.dateFilter = { startDate: null, endDate: null };\r\n            this.investmentAmountSelectedFilter = null;\r\n            this.accountTypeFilter = null;\r\n            this.accountTypeList = [];\r\n            this.investmentAmounts = [];\r\n            this.currentPage = 1;\r\n            this.perPage = 10;\r\n            this.$onInit = function () {\r\n                _this.setupFilters();\r\n                _this.setupSorts();\r\n            };\r\n            this.applyFilters = function (account) {\r\n                return Object.keys(_this.filters).reduce(function (acc, next) {\r\n                    if (!(_this.filters[next](account))) {\r\n                        acc = false;\r\n                    }\r\n                    return acc;\r\n                }, true);\r\n            };\r\n        }\r\n        AccountsListController.prototype.setupFilters = function () {\r\n            var _this = this;\r\n            this.filters['idFilter'] = function (account) {\r\n                if (!_this.idFilter)\r\n                    return true;\r\n                return account.accountId === +_this.idFilter;\r\n            };\r\n            this.filters[\"daterangeFilter\"] = function (account) {\r\n                if (!_this.dateFilter.startDate === null || _this.dateFilter.endDate === null)\r\n                    return true;\r\n                var date = _this.moment(account.dateCreated).toDate();\r\n                return _this.dateFilter.startDate.toDate() <= date && _this.dateFilter.endDate.toDate() >= date;\r\n            };\r\n            var maxInvestmentAmount = this.accounts.reduce(function (acc, next) { return next.amountHeld > acc ? next.amountHeld : acc; }, 0);\r\n            var levels = Math.ceil(maxInvestmentAmount / 5000);\r\n            for (var i = 0; i < levels; i++) {\r\n                this.investmentAmounts.push({ min: i * 5000, max: ((i + 1) * 5000), display: (i * 5) + \"k - \" + (i + 1) * 5 + \"k\" });\r\n            }\r\n            this.filters[\"investmentAmountFilter\"] = function (account) {\r\n                if (_this.investmentAmounts.length === 0)\r\n                    return true;\r\n                if (_this.investmentAmountSelectedFilter === null || _this.investmentAmountSelectedFilter === \"\")\r\n                    return true;\r\n                return (account.amountHeld >= _this.investmentAmountSelectedFilter.min && account.amountHeld <= _this.investmentAmountSelectedFilter.max);\r\n            };\r\n            this.accountTypeList = this.accounts\r\n                .map(function (i) { return i.type; })\r\n                .filter(function (value, index, self) { return self.indexOf(value) === index; }) //return unique vals\r\n                .sort();\r\n            this.filters[\"accountType\"] = function (account) {\r\n                if (_this.accountTypeFilter === null || _this.accountTypeFilter === \"\")\r\n                    return true;\r\n                return _this.accountTypeFilter === account.type;\r\n            };\r\n        };\r\n        AccountsListController.prototype.setupSorts = function () {\r\n            this.sorts.push({ label: \"Id\", predicate: function (account) { return account.accountId; }, sortReverse: false });\r\n            this.sorts.push({ label: \"Date (ascending)\", predicate: function (account) { return account.dateCreated; }, sortReverse: false });\r\n            this.sorts.push({ label: \"Date (descending)\", predicate: function (account) { return account.dateCreated; }, sortReverse: true });\r\n            this.sorts.push({ label: \"Ammount Held (ascending)\", predicate: function (account) { return account.amountHeld; }, sortReverse: false });\r\n            this.sorts.push({ label: \"Amount Held (descending)\", predicate: function (account) { return account.amountHeld; }, sortReverse: true });\r\n            this.selectedSort = this.sorts.filter(function (s) { return s.label == \"Id\"; })[0];\r\n        };\r\n        AccountsListController.prototype.clearCalendar = function () {\r\n            var _this = this;\r\n            this.$timeout(function () {\r\n                angular.element('[date-range-picker]').val(null);\r\n                _this.dateFilter = { startDate: null, endDate: null };\r\n            });\r\n        };\r\n        AccountsListController.prototype.clearAccountType = function () {\r\n            this.accountTypeFilter = null;\r\n        };\r\n        AccountsListController.prototype.clearInvested = function () {\r\n            this.investmentAmountSelectedFilter = null;\r\n        };\r\n        return AccountsListController;\r\n    }());\r\n    AccountsListController.$inject = [\"utility\", \"$timeout\", \"MomentJS\"];\r\n    angular.module(\"app\").component(\"accountList\", new AccountsListComponent());\r\n})(App || (App = {}));\r\n//# sourceMappingURL=accounts-list.component.js.map","var App;\r\n(function (App) {\r\n    var AccountsComponent = (function () {\r\n        function AccountsComponent() {\r\n            this.bindings = {\r\n                investor: \"<\"\r\n            };\r\n            this.controller = AccountsController;\r\n            this.templateUrl = \"Components/Accounts/accounts.template.html\";\r\n        }\r\n        return AccountsComponent;\r\n    }());\r\n    var AccountsController = (function () {\r\n        function AccountsController() {\r\n        }\r\n        return AccountsController;\r\n    }());\r\n    angular.module(\"app\")\r\n        .component(\"accounts\", new AccountsComponent());\r\n})(App || (App = {}));\r\n//# sourceMappingURL=accounts.component.js.map","var App;\r\n(function (App) {\r\n    var HomeComponent = (function () {\r\n        function HomeComponent() {\r\n            this.bindings = {};\r\n            this.controller = HomeController;\r\n            this.templateUrl = \"Components/Home/home.template.html\";\r\n        }\r\n        return HomeComponent;\r\n    }());\r\n    var HomeController = (function () {\r\n        function HomeController() {\r\n        }\r\n        return HomeController;\r\n    }());\r\n    angular.module(\"app\").component(\"home\", new HomeComponent());\r\n})(App || (App = {}));\r\n//# sourceMappingURL=home.component.js.map","var App;\r\n(function (App) {\r\n    var InvestorListComponent = (function () {\r\n        function InvestorListComponent() {\r\n            this.bindings = { investors: \"<\" };\r\n            this.controller = InvestorListController;\r\n            this.templateUrl = \"Components/Investors/investor-list.template.html\";\r\n        }\r\n        return InvestorListComponent;\r\n    }());\r\n    var InvestorListController = (function () {\r\n        function InvestorListController(utility, $timeout) {\r\n            var _this = this;\r\n            this.utility = utility;\r\n            this.$timeout = $timeout;\r\n            this.$onInit = function () {\r\n                console.log(\"list:\", _this.investors);\r\n                _this.setupFilters();\r\n                _this.setupSorts();\r\n            };\r\n            this.moment = window.moment;\r\n            this.sorts = [];\r\n            this.filters = [];\r\n            this.investmentAmounts = [];\r\n            this.investmentAmountSelectedFilter = null;\r\n            this.numOfAccountsFilter = null;\r\n            this.numOfAccountsList = [];\r\n            this.dateFilter = { startDate: null, endDate: null };\r\n            this.currentPage = 1;\r\n            this.perPage = 10;\r\n            this.applyFilters = function (investor) {\r\n                return Object.keys(_this.filters).reduce(function (acc, next) {\r\n                    if (!(_this.filters[next](investor))) {\r\n                        acc = false;\r\n                    }\r\n                    return acc;\r\n                }, true);\r\n            };\r\n        }\r\n        InvestorListController.prototype.setupSorts = function () {\r\n            this.sorts.push({ label: \"Id\", predicate: function (investor) { return investor.investorId; }, sortReverse: false });\r\n            this.sorts.push({ label: \"Name (ascending)\", predicate: function (investor) { return investor.name; }, sortReverse: false });\r\n            this.sorts.push({ label: \"Name (descending)\", predicate: function (investor) { return investor.name; }, sortReverse: true });\r\n            this.sorts.push({ label: \"Surname (ascending)\", predicate: function (investor) { return investor.surname; }, sortReverse: false });\r\n            this.sorts.push({ label: \"Surname (descending)\", predicate: function (investor) { return investor.surname; }, sortReverse: true });\r\n            this.sorts.push({ label: \"Date (ascending)\", predicate: function (investor) { return investor.dateCreated; }, sortReverse: false });\r\n            this.sorts.push({ label: \"Date (descending)\", predicate: function (investor) { return investor.dateCreated; }, sortReverse: true });\r\n            this.sorts.push({ label: \"Total Invested (ascending)\", predicate: function (investor) { return investor.totalInvested; }, sortReverse: false });\r\n            this.sorts.push({ label: \"Total Invested (descending)\", predicate: function (investor) { return investor.totalInvested; }, sortReverse: true });\r\n            this.selectedSort = this.sorts.filter(function (s) { return s.label == \"Id\"; })[0];\r\n        };\r\n        InvestorListController.prototype.setupFilters = function () {\r\n            var _this = this;\r\n            this.filters['idFilter'] = function (investor) {\r\n                if (!_this.idFilter)\r\n                    return true;\r\n                return investor.investorId === +_this.idFilter;\r\n            };\r\n            this.filters['nameFilter'] = function (investor) {\r\n                if (!_this.nameFilter)\r\n                    return true;\r\n                return investor.name.toLowerCase().indexOf(_this.nameFilter.toLowerCase()) > -1;\r\n            };\r\n            this.filters['surnameFilter'] = function (investor) {\r\n                if (!_this.surnameFilter)\r\n                    return true;\r\n                return investor.surname.toLowerCase().indexOf(_this.surnameFilter.toLowerCase()) > -1;\r\n            };\r\n            this.filters[\"daterangeFilter\"] = function (investor) {\r\n                if (!_this.dateFilter.startDate === null || _this.dateFilter.endDate === null)\r\n                    return true;\r\n                var date = _this.moment(investor.dateCreated).toDate();\r\n                return _this.dateFilter.startDate.toDate() <= date && _this.dateFilter.endDate.toDate() >= date;\r\n            };\r\n            var maxInvestmentAmount = this.investors.reduce(function (acc, next) { return next.totalInvested > acc ? next.totalInvested : acc; }, 0);\r\n            var levels = Math.ceil(maxInvestmentAmount / 10000);\r\n            for (var i = 0; i < levels; i++) {\r\n                this.investmentAmounts.push({ min: i * 10000, max: ((i + 1) * 10000), display: (i * 10) + \"k - \" + (i + 1) * 10 + \"k\" });\r\n            }\r\n            this.filters[\"investmentAmountFilter\"] = function (investor) {\r\n                if (_this.investmentAmounts.length === 0)\r\n                    return true;\r\n                if (_this.investmentAmountSelectedFilter === null || _this.investmentAmountSelectedFilter === \"\")\r\n                    return true;\r\n                return (investor.totalInvested >= _this.investmentAmountSelectedFilter.min && investor.totalInvested <= _this.investmentAmountSelectedFilter.max);\r\n            };\r\n            this.numOfAccountsList = this.investors\r\n                .map(function (i) { return i.numberOfAccounts; })\r\n                .filter(function (value, index, self) { return self.indexOf(value) === index; }) //return unique vals\r\n                .sort(function (a, b) { return a - b; });\r\n            this.filters[\"numOfAccounts\"] = function (investor) {\r\n                if (_this.numOfAccountsFilter === null || _this.numOfAccountsFilter === \"\")\r\n                    return true;\r\n                return +_this.numOfAccountsFilter === investor.numberOfAccounts;\r\n            };\r\n        };\r\n        InvestorListController.prototype.clearCalendar = function () {\r\n            var _this = this;\r\n            //just changing the model doesnt work here as the calendar is a jquery plugin.\r\n            //so clear the input, change the model then force a digest cycle with $timeout\r\n            this.$timeout(function () {\r\n                angular.element('[date-range-picker]').val(null);\r\n                _this.dateFilter = { startDate: null, endDate: null };\r\n            });\r\n        };\r\n        InvestorListController.prototype.clearAccounts = function () {\r\n            this.numOfAccountsFilter = null;\r\n        };\r\n        InvestorListController.prototype.clearInvested = function () {\r\n            this.investmentAmountSelectedFilter = null;\r\n        };\r\n        return InvestorListController;\r\n    }());\r\n    InvestorListController.$inject = [\"utility\", \"$timeout\"];\r\n    angular.module(\"app\")\r\n        .component(\"investorList\", new InvestorListComponent());\r\n})(App || (App = {}));\r\n//# sourceMappingURL=investor-list.component.js.map","var App;\r\n(function (App) {\r\n    var InvestorsComponent = (function () {\r\n        function InvestorsComponent() {\r\n            this.bindings = { investors: \"<\" };\r\n            this.controller = InvestorsController;\r\n            this.templateUrl = \"Components/Investors/investors.template.html\";\r\n        }\r\n        return InvestorsComponent;\r\n    }());\r\n    var InvestorsController = (function () {\r\n        function InvestorsController() {\r\n        }\r\n        return InvestorsController;\r\n    }());\r\n    angular.module(\"app\").component(\"investors\", new InvestorsComponent());\r\n})(App || (App = {}));\r\n//# sourceMappingURL=investors.component.js.map"]}